"""
Django settings for performance project.

Generated by 'django-admin startproject' using Django 3.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path
import environ

def getenvar(name):
    
    env = environ.Env()
    env.read_env(env.str('ENV_PATH', '.env'))
    """Get the environment variable or return exception."""
    try:
        val = env(name)
        if val == 'True':
            val = True
        if val == 'False':
            val = False
            
        return val
    except KeyError:
        error_msg = 'Set the {} environment variable'.format(name)


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = getenvar('SECRET_KEY')
# Application definition

INSTALLED_APPS = [
    'webpush',
    'django_extensions',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'corsheaders',
    
    # thirty apps
    'django_filters',
    'rest_framework',
    'timezone_field',
    
    
    # Apps
    'apps.payments',
    'apps.regions',
    'apps.security',
    'apps.teams',
    'apps.dashboard',
    'apps.catalog',
    'apps.survey',
   
    'apps.coach',
    # 'apps.recognition',
    'apps.s3files',
    'apps.help_coach',
    'apps.notifications',

    

]


ASGI_APPLICATION = "performance.asgi.application"
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.locale.LocaleMiddleware',
]


CORS_ORIGIN_WHITELIST = (
    'http://localhost:4200',
    'http://localhost:4201',
    'https://admin.dev.soloperformance.app',
    'https://dashboard.dev.soloperformance.app'
)

# Webpush keys
AUTH_PASSWORD_VALIDATORS = [
    ...
]

WEBPUSH_SETTINGS = {
   "VAPID_PUBLIC_KEY": getenvar('VAPID_PUBLIC_KEY') ,
   "VAPID_PRIVATE_KEY":  getenvar('VAPID_PRIVATE_KEY'),
   "VAPID_ADMIN_EMAIL":  getenvar('VAPID_ADMIN_EMAIL')
}
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = getenvar('DEBUG')

APPNAME = getenvar('APPNAME')

URL_PANEL = 'https://google.com.mx/'

ALLOWED_HOSTS = ['localhost','api.soloperformance.app','admin.dev.soloperformance.app','dashboard.dev.soloperformance.app',"127.0.0.1"]

# Email settings
EMAIL_HOST = getenvar('EMAIL_HOST') 
EMAIL_HOST_USER = getenvar('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = getenvar('EMAIL_HOST_PASSWORD')
EMAIL_PORT = getenvar('EMAIL_PORT')
EMAIL_USE_TLS = getenvar('EMAIL_USE_TLS')

# Auth user model
AUTH_USER_MODEL = 'security.User'

# Simple jwt
import datetime
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': datetime.timedelta(days=7),
    'REFRESH_TOKEN_LIFETIME': datetime.timedelta(days=7),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': True,

    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,

    'AUTH_HEADER_TYPES': ('Bearer',),
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',

    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': datetime.timedelta(days=7),
    'SLIDING_TOKEN_REFRESH_LIFETIME': datetime.timedelta(days=7),
}
# Argon
PASSWORD_HASHERS = [
    'django.contrib.auth.hashers.Argon2PasswordHasher',
    'django.contrib.auth.hashers.PBKDF2PasswordHasher',
    'django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher',
    'django.contrib.auth.hashers.BCryptSHA256PasswordHasher',
]

CUSTOM_REGISTRATION = {
    'SEND_ACTIVATION_EMAIL': True,
}

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'EXCEPTION_HANDLER': 'common.exception_handler.custom_exception_handler',
    'DEFAULT_PAGINATION_CLASS': 'common.pagination.PageNumberPagination',
    'PAGE_SIZE': getenvar('PAGE_SIZE'),
    'DEFAULT_FILTER_BACKENDS': (
        'django_filters.rest_framework.DjangoFilterBackend',
    ),
}
import os

LOCALE_PATHS = (
    os.path.join(BASE_DIR, 'locale'),
)
ROOT_URLCONF = 'performance.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'performance/templates'),
            os.path.join(BASE_DIR, 'apps/security/templates'),
            os.path.join(BASE_DIR, 'apps/notifications/templates'),

            ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'performance.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'HOST': getenvar('DB_HOST'),
        'NAME': getenvar('DB_NAME'),
        'USER': getenvar('DB_USER'),
        'PASSWORD': getenvar('DB_PASSWORD'),
        'PORT': getenvar('DB_PORT')
    }
}
bool


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 8,
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
    # {
    #     'NAME': 'project.common.validators.UppercaseValidator',
    # },
    # {
    #     'NAME': 'project.common.validators.SymbolValidator',
    # },
    # {
    #     'NAME': 'project.common.validators.NumberValidator',
    # },
]

# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True



#STATIC_ROOT = os.path.join(BASE_DIR, 'static')

AWS_ENABLE = getenvar('AWS_ENABLE')

if AWS_ENABLE:
    print('use aws s3')
    # AWS_DEFAULT_ACL = None

    AWS_ACCESS_KEY_ID = getenvar('AWS_ACCESS_KEY_ID')
    AWS_SECRET_ACCESS_KEY = getenvar('AWS_SECRET_ACCESS_KEY')
    AWS_STORAGE_BUCKET_NAME = getenvar('AWS_STORAGE_BUCKET_NAME')
    AWS_CLOUD_FRONT_URL = getenvar('AWS_CLOUD_FRONT_URL')
    AWS_REGION = getenvar('AWS_REGION')

    if AWS_CLOUD_FRONT_URL:
        AWS_S3_CUSTOM_DOMAIN = '%s' % AWS_CLOUD_FRONT_URL
    else:
        AWS_S3_CUSTOM_DOMAIN = '%s.s3.amazonaws.com' % AWS_STORAGE_BUCKET_NAME

    # AWS_DEFAULT_ACL = 'public-read'
    AWS_S3_ENCRYPTION = True

    # Static files
    STATICFILES_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
    AWS_S3_BUCKET_NAME_STATIC = AWS_STORAGE_BUCKET_NAME

    if AWS_CLOUD_FRONT_URL:
        STATIC_URL = "https://%s/" % (AWS_CLOUD_FRONT_URL)
    else:
        STATIC_URL = "https://%s/%s/" % (AWS_S3_CUSTOM_DOMAIN, AWS_STORAGE_BUCKET_NAME)

    # Media files
    DEFAULT_FILE_STORAGE = 'common.storage_backends.MediaStorage'

else:
    print('local files')
    print(os.path.join(BASE_DIR, 'static'))
    MEDIA_URL = '/media/'
    MEDIA_ROOT=os.path.join(BASE_DIR, "media")
    STATIC_URL = '/static/'
    
    STATICFILES_DIRS = [
        os.path.join(BASE_DIR, "static"),
        
    ]
    STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

SITE_ID = 3
